from django import forms
from .models import PentestTask, Vulnerability, AffectedURL, VulnTemplate, TemplateReport
from martor.fields import MartorFormField
from martor.widgets import MartorWidget
from django.forms import modelformset_factory
from django.forms.models import inlineformset_factory
from django.contrib.auth.models import User, Group
from django.utils.html import strip_tags
from django.core.exceptions import ValidationError

# from ckeditor_uploader.widgets import CKEditorUploadingWidget

class PentestTaskForm(forms.ModelForm):
    PIC_ISM_select = forms.MultipleChoiceField(
        required=False,
        widget=forms.SelectMultiple(attrs={
            'class': 'form-control',
            'id': 'id_PIC_ISM_select'
        })
    )

    class Meta:
        model = PentestTask
        fields = ['PIC_ISM', 'PIC_ISM_select']  # `PIC_ISM` l√† hidden ho·∫∑c readonly

        fields = '__all__'
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'readonly': 'readonly'}),
            'start_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'end_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'start_retest': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'end_retest': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'PIC_ISM': forms.Select(attrs={'class': 'form-control'}),  # Ch·ªçn t·ª´ dropdown list
        
        }
    def clean(self):
        """Ki·ªÉm tra l·ªói khi nh·∫≠p d·ªØ li·ªáu t·ª´ form."""
        cleaned_data = super().clean()
        start_date = cleaned_data.get("start_date")
        end_date = cleaned_data.get("end_date")
        start_retest = cleaned_data.get("start_retest")
        end_retest = cleaned_data.get("end_retest")
        name = cleaned_data.get("name")
        if not name:
            self.add_error("name", "This 'name' field is required.")

        if start_date and end_date and start_date > end_date:
            self.add_error("end_date", "End date must be greater than or equal to start date.")

        if start_retest and end_retest and start_retest > end_retest:
            self.add_error("end_retest", "End retest date must be greater than or equal to start retest date.")

        if start_date and start_retest and start_date > start_retest:
            self.add_error("start_retest", "Start retest date must be greater than or equal to start date.")

        return cleaned_data

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
         # Th√™m ID cho c√°c tr∆∞·ªùng
        self.fields['number_of_apis'].widget.attrs.update({'id': 'id_number_of_apis'})
        self.fields['scope'].widget.attrs.update({'id': 'id_scope'})
        self.fields['PIC_ISM'].widget = forms.HiddenInput()

        pentester_group = Group.objects.get(name="Pentester")
        pentesters = User.objects.filter(groups=pentester_group)
        usernames = [(user.username, user.username) for user in pentesters]
        self.fields['PIC_ISM_select'].choices = usernames
        self.usernames_json = usernames
        # N·∫øu ƒëang edit, hi·ªÉn th·ªã l·∫°i gi√° tr·ªã ƒë√£ ch·ªçn
        if self.instance and self.instance.PIC_ISM:
            selected = self.instance.PIC_ISM.split(", ")
            self.initial['PIC_ISM_select'] = selected
        self.fields['PIC_ISM'].widget.attrs.update({
            'readonly': True,
            'class': 'form-control',
            'id': 'id_PIC_ISM'
        })

       
    def clean_scope(self):
        """T√≠nh s·ªë d√≤ng c·ªßa tr∆∞·ªùng scope"""
        scope = self.cleaned_data.get('scope', '')
        # T√≠nh s·ªë d√≤ng
        num_lines = len(scope.splitlines())
        # G√°n s·ªë d√≤ng v√†o tr∆∞·ªùng number_of_apis
        self.cleaned_data['number_of_apis'] = num_lines
        return scope

    def clean(self):
        cleaned_data = super().clean()
        selected_users = cleaned_data.get('PIC_ISM_select', [])
        # Gh√©p l·∫°i th√†nh chu·ªói: 'user1, user2'
        cleaned_data['PIC_ISM'] = ', '.join(selected_users)
        return cleaned_data


class VulnerabilityForm(forms.ModelForm):
    evidence = MartorFormField(required=False)  # ‚úÖ Ph·∫£i √©p required=True

    class Meta:
        model = Vulnerability
        fields = '__all__'
        exclude = ['pentest_task']
        widgets = {
            'name_vuln': forms.TextInput(attrs={'class': 'form-control'}),
            'notify_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
        }
        
    def clean(self):
        cleaned_data = super().clean()
        name_vuln = cleaned_data.get("name_vuln")
        evidence = cleaned_data.get("evidence")
        plain_text = strip_tags(evidence or "").strip()

        if not plain_text:
            self.add_error('evidence', "'Evidence' cannot be empty.")  # üëà add_error chu·∫©n b√†i
        return cleaned_data

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field_name, field in self.fields.items():
            if field_name == 'name_vuln' and self.errors.get(field_name):
                field.widget.attrs.update({'class': 'form-control is-invalid'})
   


class AffectedURLForm(forms.ModelForm):
    poc = MartorFormField() 
    class Meta:
        model = AffectedURL
        fields = ['function', 'vuln_api', 'request', 'response', 'params', 'note', 'poc']
        widgets = {
            'function': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p function', 'class': 'form-control'}),
            'vuln_api': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p API b·ªã ·∫£nh h∆∞·ªüng', 'class': 'form-control'}),
            'request': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p request', 'class': 'form-control'}),
            'response': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p response', 'class': 'form-control'}),
            'params': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p params', 'class': 'form-control'}),
            'note': forms.Textarea(attrs={'placeholder': 'Ghi ch√∫', 'class': 'form-control'}),
            'poc': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p PoC (markdown)', 'class': 'form-control'}),
        }
    def clean(self):
        cleaned_data = super().clean()
        poc = cleaned_data.get('poc')
        if not poc or not poc.strip():
            self.add_error('poc', "‚ö†Ô∏è 'POC' cannot be empty.")


# Inline formset: li√™n k·∫øt v·ªõi Vulnerability
AffectedURLFormSet = inlineformset_factory(
    parent_model=Vulnerability,
    model=AffectedURL,
    form=AffectedURLForm,
    extra=0,  # S·ªë d√≤ng tr·ªëng ƒë·ªÉ th√™m m·ªõi
    can_delete=True
)

# forms.py
class VulnTemplateForm(forms.ModelForm):
    class Meta:
        model = VulnTemplate
        fields = '__all__'
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
            'recommendation': forms.Textarea(attrs={'rows': 3}),
            'reference': forms.Textarea(attrs={'rows': 3}),
            'impact': forms.Textarea(attrs={'rows': 3}),
        }


class TemplateReportForm(forms.ModelForm):
    class Meta:
        model = TemplateReport
        fields = ['name', 'description', 'file']

