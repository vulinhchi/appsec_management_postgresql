from django.db import models
from django.core.exceptions import ValidationError
from appsec_task.models import AppSecTask
# Create your models here.
from martor.models import MartorField  # Dùng để lưu hình ảnh + text
from django.forms import modelformset_factory
from django.forms.models import inlineformset_factory
from django.utils import timezone
from django.core.validators import MinValueValidator
from django.contrib.auth.models import User
import pytz
from datetime import datetime



class PentestTask(models.Model):
    STATUS_CHOICES = [
        ('Not Start', 'Not Start'),
        ('In Progress', 'In Progress'),
        ('Reported', 'Reported'),
        ('Retest','Retest'),
        ('Done', 'Done'),
        ('Interrupt', 'Interrupt'),
        ('Cancel', "Cancel")
    ]
    
    INTERNET_CHOICES = [
        ('Internet', 'Internet'),
        ('Internal', 'Internal'),
    ]
    IS_NEWAPP_CHOICES = [
        ('New App', 'New App'),
        ('Old App', 'Old App'),
    ]
    COMPONENT_CHOICES = [
        ('Mobile Application', 'Mobile Application'),
        ('Web Application', 'Web Application'),
        ('API Application','API Application'),
        ('Desktop Application','Desktop Application'),
    ]
    CHECKLIST_TYPE_CHOICES = [
        ('Full Checklist', 'Full Checklist'),
        ('New Function Checklist', 'New Function Checklist'),
        ('No Checklist', 'No Checklist'),
    ]

    # task description
    appsec_task = models.ForeignKey('appsec_task.AppSecTask', related_name="pentest_tasks",on_delete=models.SET_NULL, null=True, blank=True)
    # appsec_task = models.ForeignKey(AppSecTask, on_delete=models.CASCADE, related_name='pentest_tasks', null=True, blank=True)
    name = models.CharField(max_length=255, null=True, blank=True)
    description = models.TextField(null=True, blank=True)
    environment_test = models.CharField(max_length=100, null=True, blank=True)
    status = models.CharField(max_length=20, null=True, blank=True, choices=STATUS_CHOICES, default='Not Start')
    ref = models.CharField(max_length=50,null=True, blank=True)
    
    #plan
    number_of_apis = models.IntegerField(null=True, blank=True, validators=[MinValueValidator(0)])
    effort_working_days = models.IntegerField(null=True, blank=True, validators=[MinValueValidator(0)])
    scope = models.TextField(null=True, blank=True)
    PIC_ISM = models.CharField(max_length=50, null=True, blank=True)
    start_date = models.DateField(null=True, blank=True)
    end_date = models.DateField(null=True, blank=True)
    start_retest = models.DateField(null=True, blank=True)
    end_retest = models.DateField(null=True, blank=True)
    component = models.CharField(max_length=200, choices=COMPONENT_CHOICES, default='Web Application',null=True, blank=True)
    is_active = models.BooleanField(default=True)
    
    def clean(self):
        """Kiểm tra điều kiện ngày tháng hợp lệ."""
        errors = {}

        if self.start_date and self.end_date and self.start_date > self.end_date:
            errors["end_date"] = "End date must be greater than or equal to start date."

        if self.start_retest and self.end_retest and self.start_retest > self.end_retest:
            errors["end_retest"] = "End retest date must be greater than or equal to start retest date."

        if self.start_date and self.start_retest and self.start_date > self.start_retest:
            errors["start_retest"] = "Start retest date must be greater than or equal to start date."

        if errors:
            raise ValidationError(errors)

    def save(self, *args, **kwargs):
        self.full_clean()  # Quan trọng! Gọi full_clean() để kích hoạt validation
        super().save(*args, **kwargs)
        

    def __str__(self):
        return self.name

STATUS_CHOICES = [
        ('Open', 'Open'),
        ('Verified', 'Verified'),
        ('Closed', 'Closed'),
        ('Exception', 'Exception')
    ]
RISK_RATING_CHOICES = [
    ('Critical', 'Critical'),
    ('High', 'High'),
    ('Medium', 'Medium'),
    ('Low', 'Low'),
    ('Recommend', 'Recommend')
]

class Vulnerability(models.Model):
    pentest_task = models.ForeignKey(PentestTask, on_delete=models.CASCADE, related_name="vulnerabilities")
    name_vuln = models.CharField(max_length=255)
    ref = models.CharField(max_length=30, null=True, blank=True)
    risk_score = models.FloatField(null=True, blank=True)  # CVSS 3.1 Score
    risk_vector = models.CharField(max_length=50, null=True, blank=True)
    risk_rating = models.CharField(max_length=20, choices=RISK_RATING_CHOICES, null=True, blank=True, default='Recommend')
    description = models.TextField(null=True, blank=True)
    likelihood_rate = models.CharField(max_length=20, choices=RISK_RATING_CHOICES, default='Recommend')
    # likelihood = models.TextField(null=True, blank=True)
    risk_av = models.CharField(max_length=10, null=True, blank=True)
    risk_ac = models.CharField(max_length=10, null=True, blank=True)
    risk_pr = models.CharField(max_length=10, null=True, blank=True)
    risk_ui = models.CharField(max_length=10, null=True, blank=True)
    impact_rate = models.CharField(max_length=20, choices=RISK_RATING_CHOICES, default='Recommend')
    impact = models.TextField(null=True, blank=True)
    evidence = MartorField(default="", blank=True, null=True)  # ✅ Hỗ trợ Markdown + Upload Ảnh
    # affected_url = models.TextField(null=True, blank=True)
    recommendation = models.TextField(null=True, blank=True)
    reference = models.TextField(null=True, blank=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Open')
    notify_date = models.DateField(null=True, blank=True)

    def __str__(self):
        return f"{self.name_vuln} - {self.pentest_task.name}"


class AffectedURL(models.Model):
    vulnerability = models.ForeignKey('Vulnerability', on_delete=models.CASCADE, related_name='affected_urls')
    function = models.TextField(blank=True, null=True)
    vuln_api = models.TextField(blank=True, null=True)
    request = models.TextField(blank=True, null=True)
    response = models.TextField(blank=True, null=True)
    params = models.TextField(blank=True, null=True)
    note = models.TextField(blank=True, null=True)
    poc = MartorField(default="", blank=True, null=True)  

    def __str__(self):
        return f"{self.vuln_api}"


class ExportLog(models.Model):
    pentest_task = models.ForeignKey(PentestTask, on_delete=models.CASCADE, related_name="export_log")
    export_time = models.DateTimeField(default=timezone.now)
    # export_type = models.CharField(max_length=50, default="report")  # Có thể phân biệt report, excel...
    user = models.ForeignKey("auth.User", on_delete=models.SET_NULL, null=True, blank=True)

    def __str__(self):
        return f"{self.user} created report {self.pentest_task.name} at {self.export_time}"


class VulnTemplate(models.Model):
    name_vuln = models.CharField(max_length=255)
    risk_score = models.FloatField(null=True, blank=True)  # CVSS 3.1 Score
    risk_vector = models.CharField(max_length=50, null=True, blank=True)
    risk_rating = models.CharField(max_length=20, choices=RISK_RATING_CHOICES, null=True, blank=True, default='Recommend')
    description = models.TextField(null=True, blank=True)
    likelihood_rate = models.CharField(max_length=20, choices=RISK_RATING_CHOICES, default='Recommend')
    risk_av = models.CharField(max_length=10, null=True, blank=True)
    risk_ac = models.CharField(max_length=10, null=True, blank=True)
    risk_pr = models.CharField(max_length=10, null=True, blank=True)
    risk_ui = models.CharField(max_length=10, null=True, blank=True)
    impact_rate = models.CharField(max_length=20, choices=RISK_RATING_CHOICES, default='Recommend')
    impact = models.TextField(null=True, blank=True)
    recommendation = models.TextField(null=True, blank=True)
    reference = models.TextField(null=True, blank=True)
    
    def __str__(self):
        return f"{self.name_vuln}"


class Notification(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="notifications")
    title = models.CharField(max_length=255, default='No Title')
    # title = models.CharField(max_length=255, null=True, blank=True)
    description = models.TextField(blank=True)
    url = models.URLField(blank=True)  # Link khi click thông báo
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    @property
    def created_at_vn(self):
        if self.created_at:
            bangkok = pytz.timezone('Asia/Bangkok')
            return self.created_at.astimezone(bangkok).strftime('%d/%m/%Y %H:%M:%S')
        return None

    def __str__(self):
        return f"Notification for {self.user.username}"


class TemplateReport(models.Model):
    name = models.CharField(max_length=255)
    description = models.TextField(blank=True)
    file = models.FileField(upload_to='templates/report/')
    created_at = models.DateTimeField(auto_now_add=True)
    
    def __str__(self):
        return self.name


class ReportConfig(models.Model):
    current_template = models.ForeignKey(
        TemplateReport,
        on_delete=models.SET_NULL,
        null=True,
        blank=True
    )

    def save(self, *args, **kwargs):
        if not self.pk and ReportConfig.objects.exists():
            raise ValidationError("Chỉ được phép có một cấu hình báo cáo.")
        super().save(*args, **kwargs)

    @classmethod
    def get(cls):
        config, _ = cls.objects.get_or_create()
        return config

    @classmethod
    def get_current_template(cls):
        return cls.get().current_template


