from django import forms
from .models import PentestTask, Vulnerability, AffectedURL, VulnTemplate
from martor.fields import MartorFormField
from martor.widgets import MartorWidget
from django.forms import modelformset_factory
from django.forms.models import inlineformset_factory
from django.contrib.auth.models import User

# from ckeditor_uploader.widgets import CKEditorUploadingWidget

class PentestTaskForm(forms.ModelForm):
    class Meta:
        model = PentestTask
        fields = '__all__'
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'readonly': 'readonly'}),
            'start_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'end_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'start_retest': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'end_retest': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
          
        }
    def clean(self):
        """Kiểm tra lỗi khi nhập dữ liệu từ form."""
        cleaned_data = super().clean()
        start_date = cleaned_data.get("start_date")
        end_date = cleaned_data.get("end_date")
        start_retest = cleaned_data.get("start_retest")
        end_retest = cleaned_data.get("end_retest")
        name = cleaned_data.get("name")
        if not name:
            self.add_error("name", "This field is required.")

        if start_date and end_date and start_date > end_date:
            self.add_error("end_date", "End date must be greater than or equal to start date.")

        if start_retest and end_retest and start_retest > end_retest:
            self.add_error("end_retest", "End retest date must be greater than or equal to start retest date.")

        if start_date and start_retest and start_date > start_retest:
            self.add_error("start_retest", "Start retest date must be greater than or equal to start date.")

        return cleaned_data

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
         # Thêm ID cho các trường
        self.fields['number_of_apis'].widget.attrs.update({'id': 'id_number_of_apis'})
        self.fields['scope'].widget.attrs.update({'id': 'id_scope'})

        # user_choices = [(user.username, user.username) for user in User.objects.all()]
        # user_choices.insert(0, ('', '--- Choose PIC_ISM ---'))
        # self.fields['PIC_ISM'].choices = user_choices

        user_choices = [(user.username, user.username) for user in User.objects.all()]
        user_choices.insert(0, ('', '--- Choose PIC_ISM ---'))

        self.fields['PIC_ISM'].widget = forms.Select(choices=user_choices)

    def clean_scope(self):
        """Tính số dòng của trường scope"""
        scope = self.cleaned_data.get('scope', '')
        # Tính số dòng
        num_lines = len(scope.splitlines())
        # Gán số dòng vào trường number_of_apis
        self.cleaned_data['number_of_apis'] = num_lines
        return scope

# class RetestTaskForm(forms.ModelForm):
#     class Meta:
#         model = RetestTask
#         fields = ['name', 'PIC_ISM', 'start_retest', 'end_retest']


class VulnerabilityForm(forms.ModelForm):
    evidence = MartorFormField()  # ✅ Hỗ trợ Markdown Editor
    # evidence = forms.CharField(widget=MartorWidget())
    class Meta:
        model = Vulnerability
        fields = '__all__'
        exclude = ['pentest_task']
        widgets = {
            'notify_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
        }
        

# class AffectedURLForm(forms.ModelForm):
#     poc = MartorFormField()
#     class Meta:
#         model = AffectedURL
#         fields = '__all__'


class AffectedURLForm(forms.ModelForm):
    poc = MartorFormField() 
    class Meta:
        model = AffectedURL
        fields = ['function', 'vuln_api', 'request', 'response', 'params', 'note', 'poc']
        widgets = {
            'function': forms.Textarea(attrs={'placeholder': 'Nhập function', 'class': 'form-control'}),
            'vuln_api': forms.Textarea(attrs={'placeholder': 'Nhập API bị ảnh hưởng', 'class': 'form-control'}),
            'request': forms.Textarea(attrs={'placeholder': 'Nhập request', 'class': 'form-control'}),
            'response': forms.Textarea(attrs={'placeholder': 'Nhập response', 'class': 'form-control'}),
            'params': forms.Textarea(attrs={'placeholder': 'Nhập params', 'class': 'form-control'}),
            'note': forms.Textarea(attrs={'placeholder': 'Ghi chú', 'class': 'form-control'}),
            'poc': forms.Textarea(attrs={'placeholder': 'Nhập PoC (markdown)', 'class': 'form-control'}),
        }

# Inline formset: liên kết với Vulnerability
AffectedURLFormSet = inlineformset_factory(
    parent_model=Vulnerability,
    model=AffectedURL,
    form=AffectedURLForm,
    extra=0,  # Số dòng trống để thêm mới
    can_delete=True
)

# forms.py
class VulnTemplateForm(forms.ModelForm):
    class Meta:
        model = VulnTemplate
        fields = '__all__'
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
            'recommendation': forms.Textarea(attrs={'rows': 3}),
            'reference': forms.Textarea(attrs={'rows': 3}),
            'impact': forms.Textarea(attrs={'rows': 3}),
        }

