from django import forms
from .models import PentestTask, Vulnerability, AffectedURL, VulnTemplate
from martor.fields import MartorFormField
from martor.widgets import MartorWidget
from django.forms import modelformset_factory
from django.forms.models import inlineformset_factory
from django.contrib.auth.models import User
from django.utils.html import strip_tags
from django.core.exceptions import ValidationError

# from ckeditor_uploader.widgets import CKEditorUploadingWidget

class PentestTaskForm(forms.ModelForm):
    class Meta:
        model = PentestTask
        fields = '__all__'
        widgets = {
            'name': forms.TextInput(attrs={'class': 'form-control', 'readonly': 'readonly'}),
            'start_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'end_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'start_retest': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
            'end_retest': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
          
        }
    def clean(self):
        """Ki·ªÉm tra l·ªói khi nh·∫≠p d·ªØ li·ªáu t·ª´ form."""
        cleaned_data = super().clean()
        start_date = cleaned_data.get("start_date")
        end_date = cleaned_data.get("end_date")
        start_retest = cleaned_data.get("start_retest")
        end_retest = cleaned_data.get("end_retest")
        name = cleaned_data.get("name")
        # if not name:
        #     self.add_error("name", "This field is required.")
        #     if hasattr(self, 'request'):
        #         messages.error(self.request, "Name is required.")

        # if start_date and end_date and start_date > end_date:
        #     self.add_error("end_date", "End date must be greater than or equal to start date.")
        #     if hasattr(self, 'request'):
        #         messages.error(self.request, "End Date must be after Start Date.")

        # if start_retest and end_retest and start_retest > end_retest:
        #     self.add_error("end_retest", "End retest date must be greater than or equal to Start retest date.")
        #     if hasattr(self, 'request'):
        #         messages.error(self.request, "Start Retest date must be before End Retest date.")

        if not name:
            self.add_error("name", "This 'name' field is required.")

        if start_date and end_date and start_date > end_date:
            self.add_error("end_date", "End date must be greater than or equal to start date.")

        if start_retest and end_retest and start_retest > end_retest:
            self.add_error("end_retest", "End retest date must be greater than or equal to start retest date.")

        if start_date and start_retest and start_date > start_retest:
            self.add_error("start_retest", "Start retest date must be greater than or equal to start date.")

        return cleaned_data

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
         # Th√™m ID cho c√°c tr∆∞·ªùng
        self.fields['number_of_apis'].widget.attrs.update({'id': 'id_number_of_apis'})
        self.fields['scope'].widget.attrs.update({'id': 'id_scope'})

        user_choices = [(user.username, user.username) for user in User.objects.all()]
        user_choices.insert(0, ('', '--- Choose PIC_ISM ---'))

        self.fields['PIC_ISM'].widget = forms.Select(choices=user_choices)


    def clean_scope(self):
        """T√≠nh s·ªë d√≤ng c·ªßa tr∆∞·ªùng scope"""
        scope = self.cleaned_data.get('scope', '')
        # T√≠nh s·ªë d√≤ng
        num_lines = len(scope.splitlines())
        # G√°n s·ªë d√≤ng v√†o tr∆∞·ªùng number_of_apis
        self.cleaned_data['number_of_apis'] = num_lines
        return scope


class VulnerabilityForm(forms.ModelForm):
    # evidence = MartorFormField()  # ‚úÖ H·ªó tr·ª£ Markdown Editor
    evidence = MartorFormField(required=False)  # ‚úÖ Ph·∫£i √©p required=True

    class Meta:
        model = Vulnerability
        fields = '__all__'
        exclude = ['pentest_task']
        widgets = {
            'name_vuln': forms.TextInput(attrs={'class': 'form-control'}),
            'notify_date': forms.DateInput(attrs={'type': 'date', 'class': 'form-control'}),
        }
        
    def clean(self):
        cleaned_data = super().clean()
        name_vuln = cleaned_data.get("name_vuln")
        evidence = cleaned_data.get("evidence")
        plain_text = strip_tags(evidence or "").strip()

        if not plain_text:
            self.add_error('evidence', "'Evidence' cannot be empty.")  # üëà add_error chu·∫©n b√†i
        return cleaned_data

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        for field_name, field in self.fields.items():
            if field_name == 'name_vuln' and self.errors.get(field_name):
                field.widget.attrs.update({'class': 'form-control is-invalid'})
   


class AffectedURLForm(forms.ModelForm):
    poc = MartorFormField() 
    class Meta:
        model = AffectedURL
        fields = ['function', 'vuln_api', 'request', 'response', 'params', 'note', 'poc']
        widgets = {
            'function': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p function', 'class': 'form-control'}),
            'vuln_api': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p API b·ªã ·∫£nh h∆∞·ªüng', 'class': 'form-control'}),
            'request': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p request', 'class': 'form-control'}),
            'response': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p response', 'class': 'form-control'}),
            'params': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p params', 'class': 'form-control'}),
            'note': forms.Textarea(attrs={'placeholder': 'Ghi ch√∫', 'class': 'form-control'}),
            'poc': forms.Textarea(attrs={'placeholder': 'Nh·∫≠p PoC (markdown)', 'class': 'form-control'}),
        }

# Inline formset: li√™n k·∫øt v·ªõi Vulnerability
AffectedURLFormSet = inlineformset_factory(
    parent_model=Vulnerability,
    model=AffectedURL,
    form=AffectedURLForm,
    extra=0,  # S·ªë d√≤ng tr·ªëng ƒë·ªÉ th√™m m·ªõi
    can_delete=True
)

# forms.py
class VulnTemplateForm(forms.ModelForm):
    class Meta:
        model = VulnTemplate
        fields = '__all__'
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
            'recommendation': forms.Textarea(attrs={'rows': 3}),
            'reference': forms.Textarea(attrs={'rows': 3}),
            'impact': forms.Textarea(attrs={'rows': 3}),
        }

